name: Build Examples

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pin python version
        run: echo "3.11" >> .python-version

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.8.0"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install CCACHE
        run: |
          sudo apt-get update && sudo apt-get install -y ccache
        shell: bash

      - name: Setup CCACHE
        run: |
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=400M" >> $GITHUB_ENV
          ccache --version
          ccache --zero-stats
        shell: bash

      - name: Cache CCACHE directory
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install PlatformIO Core
        run: |
          uv run pip install --upgrade platformio
          uv run pio --version

      - name: Cache PlatformIO packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/.cache
            ~/.platformio/packages
            ~/.platformio/platforms
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Build all examples with PlatformIO CI
        run: |
          set -o pipefail
          mkdir -p failures
          : > build.log

          BOARD_LIST="esp32dev esp32-s3-devkitc-1"
          echo "Boards: $BOARD_LIST" | tee -a build.log

          mapfile -t EXAMPLES < <(find examples -type f -name "*.ino" -print | sort)
          if [ ${#EXAMPLES[@]} -eq 0 ]; then
            echo "No examples found under ./examples" | tee -a build.log
            exit 1
          fi

          FAIL=0
          for ex in "${EXAMPLES[@]}"; do
            echo "==============================================" | tee -a build.log
            echo "Example: $ex" | tee -a build.log
            for b in $BOARD_LIST; do
              echo "---- Board: $b" | tee -a build.log
              uv run pio ci "$ex" \
                --lib="." \
                --board "$b" \
                --project-option="lib_ldf_mode=deep+" \
                2>&1 | tee -a build.log
              STATUS=${PIPESTATUS[0]}
              if [ $STATUS -ne 0 ]; then
                FAIL=1
                log="failures/$(basename "$ex" .ino)_${b}.log"
                tail -n 200 build.log > "$log" || true
                echo "[FAILED] $ex on $b (log: $log)" | tee -a build.log
              else
                echo "[OK] $ex on $b" | tee -a build.log
              fi
            done
          done

          ccache --show-stats | tee -a build.log
          if [ $FAIL -ne 0 ]; then
            echo "Some builds failed"
            exit 1
          fi
        shell: bash

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ github.sha }}
          path: build.log

      - name: Upload failure logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-logs-${{ github.sha }}
          path: failures
